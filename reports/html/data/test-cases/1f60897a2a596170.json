{
  "uid" : "1f60897a2a596170",
  "name" : "test_test_scene_1[test_case3]",
  "fullName" : "testCases.addInvoiceToConfirm.test_invoice_manage1_Test_scene_1#test_test_scene_1",
  "historyId" : "4cfac0c788c049c180e2f593ec96fd14",
  "time" : {
    "start" : 1656032569624,
    "stop" : 1656032572435,
    "duration" : 2811
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert True == False\n +  where False = check_res({'response_body': {'data': '共确认1笔，确认成功0笔;服务异常;', 'errorCode': None, 'isPinCode': None, 'isSuccess': True, ...}, 'response_code': 200}, {'check_json': {'check_type': 'perfect_match', 'expected_code': 200, 'expected_result': 'batchConfirm_response.json'}})",
  "statusTrace" : "login_manage = <requests.sessions.Session object at 0x000001A573FBE490>\ntest_case = {'batchConfirm': {'step_4': {'data': {'sql': \"['select id from t_invoice_to_confirm where business_no = $Req{addInvoic...ep-alive', 'Content-Type': 'application/x-www-form-urlencoded', 'Method': 'post', 'User-Agent': 'Mozilla/5.0', ...}}}}}\n\n    @pytest.mark.parametrize(\"test_case\", test_case)\n    @allure.story(\"test_test_scene_1\")\n    def test_test_scene_1(login_manage, test_case):\n        api_name = list(test_case.keys())[0]\n        api_content = list(test_case.values())[0]\n        api_step = list(api_content.keys())[0]\n        api_step_content = list(api_content.values())[0]\n        test_info = api_step_content['script']\n        test_data = api_step_content['data']\n        expect_data = test_info.get('check_body')\n        api_info = ini_package(test_info, test_data)\n        if api_info.get('is_login'):\n            request = login_manage\n            result = reqSends.requestSend(request, api_step, api_name, api_info)\n        else:\n            result = reqSend.requestSend(api_step, api_name, api_info)\n>       assert True == check_res(result, expect_data)\nE       AssertionError: assert True == False\nE        +  where False = check_res({'response_body': {'data': '共确认1笔，确认成功0笔;服务异常;', 'errorCode': None, 'isPinCode': None, 'isSuccess': True, ...}, 'response_code': 200}, {'check_json': {'check_type': 'perfect_match', 'expected_code': 200, 'expected_result': 'batchConfirm_response.json'}})\n\ntestCases\\addInvoiceToConfirm\\test_invoice_manage1_Test_scene_1.py:32: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "login_manage",
    "time" : {
      "start" : 1656032558477,
      "stop" : 1656032561066,
      "duration" : 2589
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert True == False\n +  where False = check_res({'response_body': {'data': '共确认1笔，确认成功0笔;服务异常;', 'errorCode': None, 'isPinCode': None, 'isSuccess': True, ...}, 'response_code': 200}, {'check_json': {'check_type': 'perfect_match', 'expected_code': 200, 'expected_result': 'batchConfirm_response.json'}})",
    "statusTrace" : "login_manage = <requests.sessions.Session object at 0x000001A573FBE490>\ntest_case = {'batchConfirm': {'step_4': {'data': {'sql': \"['select id from t_invoice_to_confirm where business_no = $Req{addInvoic...ep-alive', 'Content-Type': 'application/x-www-form-urlencoded', 'Method': 'post', 'User-Agent': 'Mozilla/5.0', ...}}}}}\n\n    @pytest.mark.parametrize(\"test_case\", test_case)\n    @allure.story(\"test_test_scene_1\")\n    def test_test_scene_1(login_manage, test_case):\n        api_name = list(test_case.keys())[0]\n        api_content = list(test_case.values())[0]\n        api_step = list(api_content.keys())[0]\n        api_step_content = list(api_content.values())[0]\n        test_info = api_step_content['script']\n        test_data = api_step_content['data']\n        expect_data = test_info.get('check_body')\n        api_info = ini_package(test_info, test_data)\n        if api_info.get('is_login'):\n            request = login_manage\n            result = reqSends.requestSend(request, api_step, api_name, api_info)\n        else:\n            result = reqSend.requestSend(api_step, api_name, api_info)\n>       assert True == check_res(result, expect_data)\nE       AssertionError: assert True == False\nE        +  where False = check_res({'response_body': {'data': '共确认1笔，确认成功0笔;服务异常;', 'errorCode': None, 'isPinCode': None, 'isSuccess': True, ...}, 'response_code': 200}, {'check_json': {'check_type': 'perfect_match', 'expected_code': 200, 'expected_result': 'batchConfirm_response.json'}})\n\ntestCases\\addInvoiceToConfirm\\test_invoice_manage1_Test_scene_1.py:32: AssertionError",
    "steps" : [ {
      "name" : "请求步骤: step_4, 接口名: batchConfirm",
      "time" : {
        "start" : 1656032570136,
        "stop" : 1656032570145,
        "duration" : 9
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "54f9849a1886719f",
        "name" : "请求方法",
        "source" : "54f9849a1886719f.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "8b23283f2fb9bb5a",
        "name" : "请求地址",
        "source" : "8b23283f2fb9bb5a.attach",
        "type" : "text/plain",
        "size" : 71
      }, {
        "uid" : "81afab3b42e73473",
        "name" : "请求头",
        "source" : "81afab3b42e73473.attach",
        "type" : "text/plain",
        "size" : 110
      }, {
        "uid" : "7c664bdab3cdb402",
        "name" : "请求参数",
        "source" : "7c664bdab3cdb402.attach",
        "type" : "text/plain",
        "size" : 17
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 4
    }, {
      "name" : "check_json: code校验",
      "time" : {
        "start" : 1656032572423,
        "stop" : 1656032572427,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a1295b03b93582a1",
        "name" : "预期响应码: ",
        "source" : "a1295b03b93582a1.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "2b5c578f6b717f0a",
        "name" : "实际响应码: ",
        "source" : "2b5c578f6b717f0a.attach",
        "type" : "text/plain",
        "size" : 3
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 2
    }, {
      "name" : "check_json: data校验",
      "time" : {
        "start" : 1656032572427,
        "stop" : 1656032572435,
        "duration" : 8
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "cd78a47ebb579e1a",
        "name" : "校验方式: ",
        "source" : "cd78a47ebb579e1a.attach",
        "type" : "text/plain",
        "size" : 13
      }, {
        "uid" : "47ca617fb8bfb7b2",
        "name" : "预期结果: ",
        "source" : "47ca617fb8bfb7b2.attach",
        "type" : "text/plain",
        "size" : 119
      }, {
        "uid" : "eb34bd9d0e2b1eb2",
        "name" : "实际结果: ",
        "source" : "eb34bd9d0e2b1eb2.attach",
        "type" : "text/plain",
        "size" : 132
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 3
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 9
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "test_test_scene_1"
  }, {
    "name" : "parentSuite",
    "value" : "testCases.addInvoiceToConfirm"
  }, {
    "name" : "suite",
    "value" : "test_invoice_manage1_Test_scene_1"
  }, {
    "name" : "host",
    "value" : "CN01XIT00000ZON"
  }, {
    "name" : "thread",
    "value" : "11780-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCases.addInvoiceToConfirm.test_invoice_manage1_Test_scene_1"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "test_case",
    "value" : "{'batchConfirm': {'step_4': {'script': {'request_header': {'Method': 'post', 'path': '/mage/manual/batchConfirm', 'Connection': 'keep-alive', 'Content-Type': 'application/x-www-form-urlencoded', 'timeout': 10, 'sleep_time': 0, 'is_login': True}, 'request_body': {'str': '$DB{id}'}, 'check_body': {'check_json': {'check_type': 'perfect_match', 'expected_code': 200, 'expected_result': 'batchConfirm_response.json'}}}, 'data': {'sql': \"['select id from t_invoice_to_confirm where business_no = $Req{addInvoiceToConfirm.data.businessNos}']\"}}}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1f60897a2a596170.json",
  "parameterValues" : [ "{'batchConfirm': {'step_4': {'script': {'request_header': {'Method': 'post', 'path': '/mage/manual/batchConfirm', 'Connection': 'keep-alive', 'Content-Type': 'application/x-www-form-urlencoded', 'timeout': 10, 'sleep_time': 0, 'is_login': True}, 'request_body': {'str': '$DB{id}'}, 'check_body': {'check_json': {'check_type': 'perfect_match', 'expected_code': 200, 'expected_result': 'batchConfirm_response.json'}}}, 'data': {'sql': \"['select id from t_invoice_to_confirm where business_no = $Req{addInvoiceToConfirm.data.businessNos}']\"}}}}" ]
}